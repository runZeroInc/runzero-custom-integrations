load("http", http_get="get", http_post="post", http_patch="patch")
load("json", json_encode="encode", json_decode="decode")

WORKFLOW_ENDPOINT = "<UPDATE_ME>"
VULNERABILITY_SEARCH = "risk:critical"

def main(**kwargs):
    runzero_token = kwargs["access_secret"]

    # Step 1: Fetch vulnerabilities
    response = http_get(
        "https://console.runzero.com/api/v1.0/export/org/vulnerabilities.json?search={}".format(VULNERABILITY_SEARCH),
        headers={"Authorization": "Bearer {}".format(runzero_token)},
        timeout=3600
    )

    if response.status_code != 200:
        print("Failed to fetch vulnerabilities")
        return

    vulns = json_decode(response.body)

    # Step 2: Aggregate vulnerabilities
    seen = {}
    for v in vulns:
        cve = v.get("vulnerability_cve", None)
        asset_id = v.get("vulnerability_asset_id", None)
        if cve and asset_id:
            key = "{}:{}".format(asset_id, cve)
            if key not in seen:
                seen[key] = v

    # Step 3 and 4: POST and tag
    for key, vuln in seen.items():
        
        # Get attributes for the payload 
        asset_id = vuln.get("vulnerability_asset_id", None)
        cve = vuln.get("vulnerability_cve", None)
        tags = vuln.get("tags", {})
        vuln_name = vuln.get("vulnerability_name", "")
        vulnerability_exploitable = vuln.get("vulnerability_exploitable", "")
        os_vendor = vuln.get("os_vendor", "")
        os_product = vuln.get("os_product", "")
        addresses = vuln.get("addresses", [])
        names = vuln.get("names", [])
        macs = vuln.get("macs", [])

        # Verify the asset doesn't already have an open case for the CVE
        if cve and asset_id and cve not in tags.keys():
            payload = {
                "asset_id": asset_id,
                "cve": cve,
                "tags": tags,
                "vulnerability_name": vuln_name,
                "vulnerability_exploitable": vulnerability_exploitable,
                "os_vendor": os_vendor,
                "os_product": os_product,
                "addresses": addresses,
                "names": names,
                "macs": macs
            }

            http_post(
                WORKFLOW_ENDPOINT, 
                headers={"Content-Type": "application/json"}, 
                body=bytes(json_encode(payload))
            )

            tag_url = "https://console.runzero.com/api/v1.0/org/assets/{}/tags".format(asset_id)
            http_patch(
                tag_url,
                headers={"Content-Type": "application/json", "Authorization": "Bearer {}".format(runzero_token)},
                body=bytes(json_encode({"tags": "{}=OPENED".format(cve)})),
            )

        else:
            print("Already has an open case for {}".format(cve))
            continue
            
            
